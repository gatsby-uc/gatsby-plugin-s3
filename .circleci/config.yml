version: 2.1

orbs:
  node: circleci/node@1.1.6
executors:
  node:
    docker:
      - image: circleci/node:12.16
    working_directory: /tmp/gatsby-plugin-s3

jobs:
  deploy-docs:
    working_directory: ~/project/docs
    executor:
      name: node
    steps:
      - checkout:
          path: ~/project
      - node/with-cache:
          steps:
            - run: npm ci
            - run:
                command: npm ci
                working_directory: ~/project/docs/.awesome
            - run: npm run build
            - run: npm run deploy
  install:
    executor: node
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - run:
          name: install-dependencies
          command: 'npm ci --dev'
      - run:
          name: install-example-dependencies
          command: 'cd examples/with-redirects && npm ci --dev && cd ../..'
      - run:
          name: install-dependencies-again
          # Not sure why, but for some reason installing the example dependencies uninstalls some of the main package dependencies
          # Also not sure why, but for some reason installing example dependencies fails if the main package dependencies aren't already installed
          # So we have to install the main package dependencies twice
          command: 'npm ci --dev'
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}-{{ checksum "examples/with-redirects/package-lock.json" }}
          paths:
            - ./node_modules
      - persist_to_workspace:
          root: .
          paths:
            - .
  lint:
    executor: node
    steps:
      - attach_workspace:
          at: .
      - run:
          name: lint
          command: ./node_modules/.bin/eslint "src/**.ts" -f junit -o reports/linter-results.xml
      - store_artifacts:
          prefix: tests
          path: "./reports"
      - store_test_results:
          path: "./reports"

  build:
    executor: node
    steps:
      - attach_workspace:
          at: .
      - run:
          name: build
          command: npm run-script build
      - persist_to_workspace:
          root: .
          paths:
            - .
  test_e2e:
    executor: node
    environment:
      SKIP_BUCKET_CLEANUP: 1
    steps:
      - attach_workspace:
          at: .
      - run:
          name: e2e-tests
          command: npm run-script test:e2e
          environment:
            JEST_JUNIT_OUTPUT: "reports/e2e-test-results.xml"
      - store_artifacts:
          prefix: tests
          path: "./reports"
      - store_test_results:
          path: "./reports"
  notify:
    executor: node
    steps:
      - run:
          command: |
            if [ -z $CIRCLE_PULL_REQUEST ]
            then
              echo "The current build is not a Pull Request. If you intend to open an pull request after this commit, all following commits will be commented"
            else
              echo "Pull request detected, preparing to comment"

              echo "Generating JWT..."
              NOW=$(date +%s)
              EXP=$(date -d "5 minutes" +%s)

              echo "{\"alg\":\"RS256\",\"ty\":\"JWT\"}" |
                base64 |
                tr +/ -_ |
                rev |
                cut -c 2- |
                rev > header.b64
              echo "{\"iat\":$NOW,\"exp\":$EXP,\"iss\":$GITHUB_APP_ID}" |
                base64 |
                tr +/ -_ |
                rev |
                cut -c 2- |
                rev > payload.b64
              (
                echo "-----BEGIN RSA PRIVATE KEY-----"
                echo $GITHUB_APP_PRIVATE_KEY
                echo "-----END RSA PRIVATE KEY-----"
              ) > privkey.pem
              printf "%s" "$(<header.b64)" "." "$(<payload.b64)" > unsigned.b64
              openssl dgst -sha256 -sign privkey.pem -out sig.txt unsigned.b64
              cat sig.txt | base64 | tr +/ -_ | tr -d '==' | tr -d '\n' > sig.b64
              JWT="$(<unsigned.b64).$(<sig.b64)"

              echo "Retrieving installation access token..."
              TOKEN=$(curl -s -X POST \
                -H "Authorization: Bearer $JWT" \
                -H "Accept: application/vnd.github.machine-man-preview+json" \
                https://api.github.com/app/installations/$GITHUB_APP_INSTALLATION_ID/access_tokens |
                node -pe "JSON.parse(require('fs').readFileSync('/dev/stdin').toString()).token")

                # Loop through all Pull Requests
              IFS=','
              for PULL_REQUEST in $CIRCLE_PULL_REQUESTS
              do
                # Fetch PR Number
                if [[ "$PULL_REQUEST" =~ https://github.com/(.*)/pull/([0-9]+) ]]
                then
                  GITHUB_REPO=${BASH_REMATCH[1]}
                  GITHUB_PR_NUM=${BASH_REMATCH[2]}

                  if [[ "$GITHUB_REPO" == "$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME" ]]
                  then
                    # Fetch log
                    if [ ! -z $GITTOOLS_LOGPATH ]
                    then
                      PRCOMMENT_LOG="Log:\n$(cat $GITTOOLS_LOGPATH)"
                    fi

                    echo "Commenting on PR number $GITHUB_PR_NUM in repo $GITHUB_REPO..."
                    # Curl Request to post comment to PR
                    ## Currently this seems to only update the top most comment.
                    curl -s -H "Authorization: token $TOKEN" -X POST \
                    -d "{\"body\": \"[AUTOMATED MESSAGE]\nWaiting for approval from a project maintainer before running e2e tests.\n\n$PING_PROJECT_MAINTAINERS https://circleci.com/workflow-run/$CIRCLE_WORKFLOW_ID\"}" \
                    "https://api.github.com/repos/${GITHUB_REPO}/issues/${GITHUB_PR_NUM}/comments"
                  fi
                else
                  echo "Unable to parse PR URL $PULL_REQUEST"
                fi
              done
              IFS=' '
              echo "Finished!"
            fi

workflows:
  deploy-docs:
    jobs:
      - deploy-docs:
          context: gatsby-plugin-s3-docs
          filters:
            branches:
              only: master
  main:
    jobs:
      - install
      - lint:
          requires:
            - install
      - build:
          requires:
            - install
      - notify:
          context: gatsby-plugin-s3-github
          requires:
            - build
      - test_e2e:
          context: gatsby-plugin-s3-e2e
          requires:
            - build
